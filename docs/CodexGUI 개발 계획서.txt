# CodexGUI (Web Edition) 세부 개발 계획서 v0.2

> **문서 목적** : CodexGUI를 웹 (PWA) 우선으로 구현하여 LAIOS 생태계 및 일반 개발자에게 배포하기 위한 **전체 로드맵**을 한눈에 제공한다.

---

## 목차
1. [개요](#개요)
2. [스택 및 사양](#스택-및-사양)
   1. [프론트엔드](#프론트엔드)
   2. [백엔드 API 게이트웨이](#백엔드-api-게이트웨이)
   3. [데이터 스토리지 / 로그](#데이터-스토리지--로그)
   4. [인터페이스 계층](#인터페이스-계층)
3. [개발 마일스톤](#개발-마일스톤)
4. [오픈소스 전략](#오픈소스-전략)
5. [기대 결과](#기대-결과)

---

## 개요

| 항목 | 내용 |
|------|------|
| **프로젝트 명** | **CodexGUI (Web Edition)** |
| **목표** | 1) Git 레포 분석·조작, 2) LLM 대화 로그, 3) 프로젝트 메타 관리 기능을 **브라우저/PWA** 형태로 제공.<br>— LAIOS 서버에 쉽게 연동 & 오프라인에서도 기초 기능 작동 |
| **타깃 OS/디바이스** | 최신 Chromium·Firefox·Safari + iOS/Android PWA + 데스크탑(Win/mac/Linux) 크로미움 브라우저 |
| **라이선스** | Apache‑2.0 (코어) / MIT (샘플 플러그인) |
| **최초 버전 범위** | 프로젝트 목록, 구조 스냅샷, 채팅 로그, Git 프록시, I18N(영 / 한) |

---

## 스택 및 사양

### 프론트엔드
| 카테고리 | 선택안 | 비고 |
|-----------|--------|------|
| **언어 / 러untime** | TypeScript 5.x | ES2022 타깃 |
| **프레임워크** | React 18 + Vite 5 | _Client-only routing; 향후 SSR(Next.js app router) 스왑 가능_| 
| **State 관리** | Zustand (global) + React Context | 프로젝트/테마/세션 store 분리 |
| **UI 라이브러리** | Radix UI + TailwindCSS 3 | 무게·접근성 균형 |
| **국제화** | i18next(JSON 리소스) | 초기: en / ko, 후속: zh‑Hans, es, ja, de, it, fr |
| **라우팅** | React Router 6 `/launch → /projects → /project/:id` |
| **PWA 옵션** | Vite plugin‑pwa (service‑worker, offline cache) |
| **빌드 대상** | `/web-dist/` 정적 번들 (FastAPI `StaticFiles` or S3) |

#### UI 장면 & 레이아웃 요약
1. **[Launch]** API 키 입력·검증 (실패 시 모달 고정).<br>2. **[Projects]** — 프로젝트 카드·아바타·시스템 버튼(설정/플러그인/루트폴더).<br>3. **[Project]** — 좌측 최근 파일 썸네일(96×96), 우측 채팅 로그, 하단 입력창.<br>   *모바일 뷰에서는 좌측 pane를 드로어로 전환, 입력창은 sticky footer.*

### 백엔드 API 게이트웨이
| 목적 | 구현 방법 |
|------|-----------|
| **Git 조작** | FastAPI 라우트 → Python `dulwich` or `gitpython`. `/git/commit`, `/git/branch`, `/git/status` 등 REST 엔드포인트 |
| **FS 권한** | `/fs/read`, `/fs/write`, `/fs/list` with path whitelist (CORS + JWT) |
| **Codex 코어 호출** | LAIOS 내부 호출 or 별도 worker. 비동기 queue (Cloud Task / Celery) |
| **토큰 잔량 조회** | `GET /openai/usage?api_key=…` (대시보드 β API 사용) + 24 h 캐시 |
| **Auth** | OAuth2 (JWT + Refresh) or 시작 단계는 단순 API Key Header |

### 데이터 스토리지 / 로그
| 분류 | 저장소 | 특징 |
|------|--------|------|
| **App Meta** | SQLite `codexgui.db` (우선) | Project, Persona, UserPref table |
| **Chat/Action Log** | NDJSON 🗂 `/logs/<project>/YYYYMMDD.ndjson` | 1 일 1 파일 rotation |
| **Structure Snapshot** | JSON tree `/snapshots/<commit_sha>.json` | 관측 시점별 diff 가능 |

### 인터페이스 계층
```
React (TS)      ↔  axios ↔  FastAPI (Python)
                  REST
Git/FS worker —┘       │async–queue
                       └→ LAIOS context mirror
```

---

## 개발 마일스톤

| 스프린트(2주) | 목표 산출물 | 주요 이슈 |
|---------------|------------|-----------|
| **S0** | Vite + React 보일러플레이트, Tailwind 설정, I18n 플래그 | PWA 메타, eslint, prettier 워크플로우 |
| **S1** | **[Launch] Scene** + API 키 검증 모달 | 환경변수 관리, 키 암호화 저장 |
| **S2** | **Projects Scene** (Cards, 즐겨찾기, 삭제 슬라이드) | Zustand store 정의, i18n 카드 텍스트 json화 |
| **S3** | FastAPI Git/FS 엔드포인트 MVP | Path whitelist, 오류 처리 테스트 |
| **S4** | **Project Scene** UI + 채팅 입력/스크롤, 최근 파일 썸네일 | 모바일 레이아웃 브레이크포인트 최적화 |
| **S5** | 구조 Analyzer (worker) + Snapshot 뷰어 | tree‑sitter 스캔, diff 컬러링 |
| **S6** | Persona 편집 modal + 상태 애니메이션(sprite slicing) | 화면리프레시 성능 (virtual list) |
| **S7** | I18N 4개 언어 추가 (locale switcher) | 번역 CI 파이프라인 (Crowdin) |
| **S8** | **LAIOS Bridge α** — 로그 동기화, context push | 파일 lock 경합 해결 |
| **S9** | QA / E2E 테스트 (Playwright) + 퍼포먼스 최적화 |  Lighthouse PWA 점수≥90 |
| **S10**| **Beta 릴리스** — GitHub Pages & Docker 이미지 | 버그 버운티 준비 |

> **총 개발 기간 ≈ 20주(5개월)** — 1~3인 팀 가정. 일부 단계 병렬화 가능.

---

## 오픈소스 전략
1. **라이선스 분리**  
   - *codexgui-core* (Apache‑2.0) : 프론트 & API 스펙.  
   - *plugins* 폴더 (MIT) : 샘플 Git/FS/LAIOS 플러그인.
2. **거버넌스 모델**  
   - Maintainer 5인 이하 “Core Team” + 외부 PR 라벨링 규칙.  
   - RFC 폴더로 기능 제안 프로세스 운영.
3. **배포 채널**  
   - GitHub Releases(PWA 정적 번들)  
   - Docker Hub `codexgui/web:<tag>`  
   - npm 패키지 `@codexgui/sdk` (플러그인 API 타입 정의).
4. **커뮤니티 빌드**  
   - Matrix 공개 방 / Discord 채널.  
   - `good first issue`, `help wanted` 라벨 활성 운영.

---

## 기대 결과
| 구분 | 성공 지표 (MVP 3개월 내) |
|------|------------------------|
| **기술** | • 브라우저‑PWA 설치 → 오프라인 모드에서 프로젝트 메타·로그 열람 가능.<br>• Git commit / status REST API RTT < 120 ms (로컬). |
| **사용자** | • 내부 (LAIOS) 팀원 3+명이 일상 개발 흐름에 CodexGUI 채팅 로그 사용.<br>• 오픈소스 GitHub ★ 100개 달성. |
| **생태계** | • 외부 플러그인(예: Notion Sync) 2개 이상 제출.<br>• LAIOS QA 시나리오에서 CodexGUI context mirror 활용률 70 %. |
| **향후 확장** | 데스크탑(Tauri) 패키지 빌드 시 코드 재사용률 ≥ 80 %. |

> 이 계획서로 구체 로드맵이 일단락되었습니다. **추가 세부(예: API 명세, DB 스키마, 컴포넌트 트리)**가 필요하면 다음 단계에서 모듈별 상세 사양서를 파생해 작성하면 됩니다.

